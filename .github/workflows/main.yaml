# name: CI Pipeline

# on:
#   push:
#     branches:
#       - feature/*
# jobs:
#   install:
#     name: Install Dependencies
#     runs-on: ubuntu-22.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Install backend dependencies
#         working-directory: ./api
#         run: npm ci

#       - name: Install frontend dependencies
#         working-directory: ./webapp
#         run: npm ci

#   test:
#     name: Run Tests
#     runs-on: ubuntu-22.04
#     needs: install
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Run backend tests
#         working-directory: ./api
#         run: |
#           npm ci
#           npm test

#       - name: Run frontend tests
#         working-directory: ./webapp
#         run: |
#           npm ci
#           npm test

#   build:
#     name: Build Application
#     runs-on: ubuntu-22.04
#     needs: test
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Build backend
#         working-directory: ./api
#         run: npm run build

#       - name: Build frontend
#         working-directory: ./webapp
#         run: |
#           npm ci
#           npm run build

#   dockerize:
#     name: Dockerize Application
#     runs-on: ubuntu-22.04
#     needs: build
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2
#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push frontend image
#         run: |
#           docker build --no-cache  -t ${{ secrets.DOCKER_USERNAME }}/ecommercefrontend:$GITHUB_SHA -f webapp/Dockerfile ./webapp
#           docker push ${{ secrets.DOCKER_USERNAME }}/ecommercefrontend:$GITHUB_SHA

#       - name: Build and push backend image
#         run: |
#           docker build --no-cache  -t ${{ secrets.DOCKER_USERNAME }}/ecommercebackend:$GITHUB_SHA -f api/Dockerfile ./api
#           docker push ${{ secrets.DOCKER_USERNAME }}/ecommercebackend:$GITHUB_SHA

name: CI Pipeline

on:
  push:
    branches:
      - feature/*
      
jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install backend dependencies
        working-directory: ./api
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./webapp
        run: npm ci

  test:
    name: Run Tests
    runs-on: ubuntu-22.04
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run backend tests
        working-directory: ./api
        run: |
          npm ci
          npm test

      - name: Run frontend tests
        working-directory: ./webapp
        run: |
          npm ci
          npm test

  build:
    name: Build Application
    runs-on: ubuntu-22.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build backend
        working-directory: ./api
        run: npm run build

      - name: Build frontend
        working-directory: ./webapp
        run: |
          npm ci
          npm run build

  dockerize:
    name: Dockerize Application
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/ecommercefrontend:$GITHUB_SHA -f webapp/Dockerfile ./webapp
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommercefrontend:$GITHUB_SHA

      - name: Build and push backend image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/ecommercebackend:$GITHUB_SHA -f api/Dockerfile ./api
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommercebackend:$GITHUB_SHA

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-22.04
    needs: dockerize
    steps:
      - name: Configure SSH for EC2
        run: |
          echo "${{ secrets.SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Deploy Dockerized App to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'

          # Update system packages
          sudo -i
          apt-get update -y

          # Install Docker if not installed
          if ! [ -x "$(command -v docker)" ]; then
            apt-get install -y docker.io
          fi

          # Log in to Docker Hub
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Pull and run the backend container
          docker pull ${{ secrets.DOCKER_USERNAME }}/ecommercebackend:$GITHUB_SHA
          docker stop e-commerce-backend || true
          docker rm e-commerce-backend || true
          docker run -d --name e-commerce-backend -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/ecommercebackend:$GITHUB_SHA

          # Pull and run the frontend container
          docker pull ${{ secrets.DOCKER_USERNAME }}/ecommercefrontend:$GITHUB_SHA
          docker stop e-commerce-frontend || true
          docker rm e-commerce-frontend || true
          docker run -d --name e-commerce-frontend -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/ecommercefrontend:$GITHUB_SHA

          EOF
